*& Form
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> T_TAB
*&      --> P_FILE
*&---------------------------------------------------------------------*
FORM upload_head_xlsx  TABLES   lt_input
                        USING lwa_input STRUCTURE wa_head
                          l_file.
    DATA : lv_filename      TYPE string,
       lt_records       TYPE solix_tab,
       lv_headerxstring TYPE xstring,
       lv_filelength    TYPE i,
       l_index          TYPE sy-index.
       "lv_qty           TYPE qsollwertc,
       "lv_fltp          TYPE qsollwerte.

    FIELD-SYMBOLS : <lt_data>   TYPE STANDARD TABLE,
                    <lwa_data>  TYPE any,
                    <l_field>   TYPE any,
                    <l_field2>  TYPE any.

    lv_filename = l_file.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = lv_filename
        filetype                = 'BIN'
      IMPORTING
        filelength              = lv_filelength
        header                  = lv_headerxstring
      TABLES
        data_tab                = lt_records
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.

    "convert binary data to xstring
    "if you are using cl_fdt_xl_spreadsheet in odata then skips this step
    "as excel file will already be in xstring
    CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
      EXPORTING
        input_length = lv_filelength
      IMPORTING
        buffer       = lv_headerxstring
      TABLES
        binary_tab   = lt_records
      EXCEPTIONS
        failed       = 1
        OTHERS       = 2.

    IF sy-subrc <> 0.
        MESSAGE s127(swf_http) DISPLAY LIKE 'E'.
    ENDIF.

    DATA: lo_excel_ref TYPE REF TO cl_fdt_xl_spreadsheet .

    TRY .
        lo_excel_ref = NEW cl_fdt_xl_spreadsheet(
                                document_name = lv_filename
                                xdocument     = lv_headerxstring ) .
    CATCH cx_fdt_excel_core.
        MESSAGE s127(swf_http) DISPLAY LIKE 'E'.
    ENDTRY .

    "Get List of Worksheets
    TRY .
        lo_excel_ref->if_fdt_doc_spreadsheet~get_worksheet_names(
          IMPORTING
            worksheet_names = DATA(lt_worksheets) ).
    CATCH cx_sy_ref_is_initial.
        MESSAGE s127(swf_http) DISPLAY LIKE 'E'.
    ENDTRY.

    IF NOT lt_worksheets IS INITIAL.
        "Decide which sheet would you want to upload
        READ TABLE lt_worksheets INTO DATA(lv_woksheetname) INDEX 1.

        DATA(lo_data_ref) = lo_excel_ref->if_fdt_doc_spreadsheet~get_itab_from_worksheet(
                                                 lv_woksheetname ).
        "now you have excel work sheet data in dyanmic internal table
        ASSIGN lo_data_ref->* TO <lt_data>.
    ENDIF.

    IF <lt_data> IS ASSIGNED.
        LOOP AT <lt_data> ASSIGNING <lwa_data>.
            CLEAR: lwa_input.
            DO 200 TIMES.
               l_index = sy-index.

               UNASSIGN: <l_field>, <l_field2>.
               ASSIGN COMPONENT l_index OF STRUCTURE <lwa_data> TO <l_field>.
               ASSIGN COMPONENT l_index OF STRUCTURE lwa_input TO <l_field2>.
               IF <l_field> IS ASSIGNED AND <l_field2> IS ASSIGNED.
                    <l_field2> = <l_field> .
               ELSE.
                    EXIT.
               ENDIF.
            ENDDO.
            APPEND lwa_input TO lt_input.
        ENDLOOP.
**& 2022/10/27 shenli 如上方法轉換后，comp_qty字段如果是0.0xx的時候，會自動轉換為科學計數法，
**& 因此需要將此計數方式改爲正常的小數進行處理。(ITR202210059-02)
*        LOOP AT lt_input INTO wa_input.
*          IF sy-tabix > 1.
*            MOVE wa_input-comp_qty TO lv_fltp.
*            CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
*              EXPORTING
*                i_number_of_digits       = 3
*                i_fltp_value             = lv_fltp
*              IMPORTING
*                e_char_field             = lv_qty.
*            MOVE lv_qty TO wa_input-comp_qty.
*            MODIFY lt_input FROM wa_input.
*          ENDIF.
*        ENDLOOP.

    ENDIF.

ENDFORM.
FORM upload_tab3_xlsx  TABLES   lt_input
                        USING lwa_input STRUCTURE wa_tab3
                          l_file.
    DATA : lv_filename      TYPE string,
       lt_records       TYPE solix_tab,
       lv_headerxstring TYPE xstring,
       lv_filelength    TYPE i,
       l_index          TYPE sy-index.
       "lv_qty           TYPE qsollwertc,
       "lv_fltp          TYPE qsollwerte.

    FIELD-SYMBOLS : <lt_data>   TYPE STANDARD TABLE,
                    <lwa_data>  TYPE any,
                    <l_field>   TYPE any,
                    <l_field2>  TYPE any.

    lv_filename = l_file.

    CALL FUNCTION 'GUI_UPLOAD'
      EXPORTING
        filename                = lv_filename
        filetype                = 'BIN'
      IMPORTING
        filelength              = lv_filelength
        header                  = lv_headerxstring
      TABLES
        data_tab                = lt_records
      EXCEPTIONS
        file_open_error         = 1
        file_read_error         = 2
        no_batch                = 3
        gui_refuse_filetransfer = 4
        invalid_type            = 5
        no_authority            = 6
        unknown_error           = 7
        bad_data_format         = 8
        header_not_allowed      = 9
        separator_not_allowed   = 10
        header_too_long         = 11
        unknown_dp_error        = 12
        access_denied           = 13
        dp_out_of_memory        = 14
        disk_full               = 15
        dp_timeout              = 16
        OTHERS                  = 17.

    "convert binary data to xstring
    "if you are using cl_fdt_xl_spreadsheet in odata then skips this step
    "as excel file will already be in xstring
    CALL FUNCTION 'SCMS_BINARY_TO_XSTRING'
      EXPORTING
        input_length = lv_filelength
      IMPORTING
        buffer       = lv_headerxstring
      TABLES
        binary_tab   = lt_records
      EXCEPTIONS
        failed       = 1
        OTHERS       = 2.

    IF sy-subrc <> 0.
        MESSAGE s127(swf_http) DISPLAY LIKE 'E'.
    ENDIF.

    DATA: lo_excel_ref TYPE REF TO cl_fdt_xl_spreadsheet .

    TRY .
        lo_excel_ref = NEW cl_fdt_xl_spreadsheet(
                                document_name = lv_filename
                                xdocument     = lv_headerxstring ) .
    CATCH cx_fdt_excel_core.
        MESSAGE s127(swf_http) DISPLAY LIKE 'E'.
    ENDTRY .

    "Get List of Worksheets
    TRY .
        lo_excel_ref->if_fdt_doc_spreadsheet~get_worksheet_names(
          IMPORTING
            worksheet_names = DATA(lt_worksheets) ).
    CATCH cx_sy_ref_is_initial.
        MESSAGE s127(swf_http) DISPLAY LIKE 'E'.
    ENDTRY.

    IF NOT lt_worksheets IS INITIAL.
        "Decide which sheet would you want to upload
        READ TABLE lt_worksheets INTO DATA(lv_woksheetname) INDEX 1.

        DATA(lo_data_ref) = lo_excel_ref->if_fdt_doc_spreadsheet~get_itab_from_worksheet(
                                                 lv_woksheetname ).
        "now you have excel work sheet data in dyanmic internal table
        ASSIGN lo_data_ref->* TO <lt_data>.
    ENDIF.

    IF <lt_data> IS ASSIGNED.
        LOOP AT <lt_data> ASSIGNING <lwa_data>.
            CLEAR: lwa_input.
            DO 200 TIMES.
               l_index = sy-index.

               UNASSIGN: <l_field>, <l_field2>.
               ASSIGN COMPONENT l_index OF STRUCTURE <lwa_data> TO <l_field>.
               ASSIGN COMPONENT l_index OF STRUCTURE lwa_input TO <l_field2>.
               IF <l_field> IS ASSIGNED AND <l_field2> IS ASSIGNED.
                    <l_field2> = <l_field> .
               ELSE.
                    EXIT.
               ENDIF.
            ENDDO.
            APPEND lwa_input TO lt_input.
        ENDLOOP.
**& 2022/10/27 shenli 如上方法轉換后，comp_qty字段如果是0.0xx的時候，會自動轉換為科學計數法，
**& 因此需要將此計數方式改爲正常的小數進行處理。(ITR202210059-02)
*        LOOP AT lt_input INTO wa_input.
*          IF sy-tabix > 1.
*            MOVE wa_input-comp_qty TO lv_fltp.
*            CALL FUNCTION 'QSS0_FLTP_TO_CHAR_CONVERSION'
*              EXPORTING
*                i_number_of_digits       = 3
*                i_fltp_value             = lv_fltp
*              IMPORTING
*                e_char_field             = lv_qty.
*            MOVE lv_qty TO wa_input-comp_qty.
*            MODIFY lt_input FROM wa_input.
*          ENDIF.
*        ENDLOOP.

    ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_file
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> T_TAB
*&      --> WA_TAB
*&      --> P_FILE
*&---------------------------------------------------------------------*
FORM upload_head_xls  TABLES   lt_tab
               USING    lwa_tab STRUCTURE wa_head
                        l_file.
    TYPE-POOLS truxs.
    DATA:it_raw TYPE truxs_t_text_data.

    DATA: BEGIN OF gt_data OCCURS 0,
            col1 TYPE char10,
            col2 TYPE char10,
          END OF gt_data.
*    Excel传值
    CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
      EXPORTING
*       I_FIELD_SEPERATOR =
*        i_line_header = 'X'
        i_tab_raw_data = it_raw            " WORK TABLE
        i_filename = l_file
      TABLES
        i_tab_converted_data = lt_tab[]   "ACTUAL DATA
      EXCEPTIONS
        conversion_failed = 1
      OTHERS = 2.
    IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*& Form get_file
*&---------------------------------------------------------------------*
*& text
*&---------------------------------------------------------------------*
*&      --> T_TAB
*&      --> WA_TAB
*&      --> P_FILE
*&---------------------------------------------------------------------*
FORM upload_tab3_xls  TABLES   lt_tab
               USING    lwa_tab STRUCTURE wa_tab3
                        l_file.
    TYPE-POOLS truxs.
    DATA:it_raw TYPE truxs_t_text_data.

    DATA: BEGIN OF gt_data OCCURS 0,
            col1 TYPE char10,
            col2 TYPE char10,
          END OF gt_data.
*    Excel传值
    CALL FUNCTION 'TEXT_CONVERT_XLS_TO_SAP'
      EXPORTING
*       I_FIELD_SEPERATOR =
*        i_line_header = 'X'
        i_tab_raw_data = it_raw            " WORK TABLE
        i_filename = l_file
      TABLES
        i_tab_converted_data = lt_tab[]   "ACTUAL DATA
      EXCEPTIONS
        conversion_failed = 1
      OTHERS = 2.
    IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.
ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  GUI_DOWNLOAD
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
FORM download_error TABLES lt_tab USING l_filetype TYPE char10
                        l_codepage TYPE abap_encoding
                        l_ext .

    DATA: l_tabix TYPE sy-tabix.
    DATA: l_filename TYPE string.
    DATA: l_filelength TYPE i.
    DATA: l_xstring TYPE xstring.
    DATA: lt_xtab TYPE solix_tab.
    FIELD-SYMBOLS <fst> TYPE STANDARD TABLE.
    FIELD-SYMBOLS: <lwa_data> TYPE any.
    FIELD-SYMBOLS: <l_field>  TYPE any.
    FIELD-SYMBOLS: <l_value>  TYPE any.

*    CONCATENATE p_file w_name INTO l_filename SEPARATED BY '/'.

    l_filename = p_error.

    CLEAR: l_filelength, l_xstring, lt_xtab.
    IF l_ext = 'XLS'.
        TRY.
            DATA(xlsx_handling) = cl_ehfnd_xlsx=>get_instance( ).
            DATA(xlsx_document) = xlsx_handling->create_doc( ).
            "xlsx_document->add_new_sheet( '12313' ).
            DATA(xlsx_sheets) = xlsx_document->get_sheets( ).
            DATA(first_xlsx_sheet) = xlsx_document->get_sheet_by_id( xlsx_sheets[ 1 ]-sheet_id ).
            first_xlsx_sheet->change_sheet_name( '錯誤訊息' ).

            CLEAR: l_xstring.
            LOOP AT lt_tab ASSIGNING <lwa_data>.
              l_tabix = sy-tabix.
              DO .
                UNASSIGN <l_value>.
                ASSIGN COMPONENT sy-index OF STRUCTURE <lwa_data> TO <l_value>.
                IF <l_value> IS NOT ASSIGNED.
                  EXIT.
                ENDIF.
                first_xlsx_sheet->set_cell_content( iv_row = l_tabix iv_column = sy-index iv_value = <l_value> ).
              ENDDO.
            ENDLOOP.
            UNASSIGN: <lwa_data>.

            l_xstring = xlsx_document->save( ).

            CATCH cx_openxml_format INTO DATA(openxml_format_exception).
                MESSAGE |Error occurs when constructing excel file instance. cx_openxml_format| TYPE 'S'.
            CATCH cx_openxml_not_found INTO DATA(openxml_not_found_exception).
                MESSAGE |Error occurs when constructing excel file instance. CX_OPENXML_NOT_FOUND | TYPE 'S'.
            CATCH cx_openxml_not_allowed INTO DATA(openxml_not_allowed_exception).
                MESSAGE |Error occurs when constructing excel file instance. CX_OPENXML_NOT_ALLOWED | TYPE 'S'.
        ENDTRY.

        CALL FUNCTION 'SCMS_XSTRING_TO_BINARY'
          EXPORTING
            buffer        = l_xstring
*           APPEND_TO_TABLE       = ' '
          IMPORTING
            output_length = l_filelength
          TABLES
            binary_tab    = lt_xtab.
    ENDIF.

    UNASSIGN <fst>.
    ASSIGN lt_xtab[] TO <fst>.
    CHECK: <fst> IS ASSIGNED.

    CALL FUNCTION 'GUI_DOWNLOAD'
      EXPORTING
        bin_filesize            = xstrlen( l_xstring )
        filename                = l_filename
        filetype                = l_filetype
*        write_field_separator   = l_sep
        codepage                = l_codepage
      IMPORTING
        filelength                = l_filelength
      TABLES
        data_tab                = <fst>
      EXCEPTIONS
        file_write_error        = 1
        no_batch                = 2
        gui_refuse_filetransfer = 3
        invalid_type            = 4
        no_authority            = 5
        unknown_error           = 6
        header_not_allowed      = 7
        separator_not_allowed   = 8
        filesize_not_allowed    = 9
        header_too_long         = 10
        dp_error_create         = 11
        dp_error_send           = 12
        dp_error_write          = 13
        unknown_dp_error        = 14
        access_denied           = 15
        dp_out_of_memory        = 16
        disk_full               = 17
        dp_timeout              = 18
        file_not_found          = 19
        dataprovider_exception  = 20
        control_flush_error     = 21
        OTHERS                  = 22.
      IF sy-subrc <> 0.
          MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
              WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
      ENDIF.
ENDFORM.
FORM download_error_xls TABLES lt_tab USING l_file.

*    Excel传值
    CALL FUNCTION 'SAP_CONVERT_TO_XLS_FORMAT'
      EXPORTING
        i_filename = l_file
      TABLES
        i_tab_sap_data = lt_tab[]   "ACTUAL DATA
      EXCEPTIONS
        conversion_failed = 1
      OTHERS = 2.
    IF sy-subrc <> 0.
        MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
        WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
    ENDIF.


ENDFORM.
